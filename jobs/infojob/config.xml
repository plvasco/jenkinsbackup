<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.81">
    <script>#!/usr/bin/env groovy

@Library(&apos;jenkins-shared-lib&apos;) _

pipeline {
    agent any

    environment {
        PROJECT_NAME = get_project_name()
        PR_BRANCH = &quot;&quot;
    }

    stages{
        stage(&quot;git checkout&quot;){
            steps{
                git branch: &apos;dev&apos;, credentialsId: &apos;demo-key&apos;, url: &apos;git@github.com:orgtestin/demo_code.git&apos;
            }
           
        }
        stage(&apos;Build&apos;) {
            steps {
                sh label: &apos;Debug: Print env vars&apos;, script: &apos;&apos;&apos;printenv | sort&apos;&apos;&apos;
            }
        }        
        stage(&quot;info&quot;){
            steps{
                writeFile file: &apos;info.json&apos;, text: create_info()
            }          
        }
        stage(&quot;Compress Files&quot;){
            steps{
                compress_files([&quot;info.json&quot;, &quot;README.md&quot;, &quot;src/*&quot;, &quot;vars/*&quot;]) as String[]
            }          
        }        
        stage(&apos;codacy&apos;) {
            steps {
                script {
                    withCredentials([string(credentialsId: &apos;token&apos;, variable: &apos;TOKEN&apos;)]) {
                        def grade = codacy_report(TOKEN)
                        if ( grade == &quot;B&quot; ) {
                            echo &quot;Grade is of acceptable value : ${grade}&quot;
                        }else {
                            throw new hudson.AbortException(&quot;[FAILURE] Grade is below acceptable value : ${grade}&quot;)
                        }            
                    }
                }
            }
        }                
    }
    post {
        always{
            slacknotification(currentBuild.currentResult,&apos;vascocapital&apos;,&apos;jenkins&apos;,&apos;#jenkins&apos;,&apos;slack-tokenId-credential&apos;,getTestResultsForSlack())
        }
    }    
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>